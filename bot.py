import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv
from database import SessionLocal, Article

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

@dp.message(Command("start"))
async def start_command(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥"""
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–∞—Ä—Å–µ—Ä —Å—Ç–∞—Ç–µ–π —Å Habr.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /articles, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç–∞—Ç–µ–π."
    )

@dp.message(Command("articles"))
async def get_articles_command(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç–∞—Ç–µ–π –∏–∑ –±–∞–∑—ã"""
    session = SessionLocal()
    articles = session.query(Article).order_by(Article.id.desc()).limit(5).all()
    session.close()

    if not articles:
        await message.answer("üòï –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–µ–π. –ó–∞–ø—É—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    response_text = "üì∞ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:**\n\n"
    for article in articles:
        response_text += f"üîπ {article.title}\n"

    await message.answer(response_text, parse_mode="Markdown")

async def main():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())